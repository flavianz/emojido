import "sys";
import "math";

function int stringLength function string input {
    asm "    mov rdi, [rbp + 16]
    xor eax, eax
    pxor xmm0, xmm0
.loop:
    movdqu xmm1, [rdi + rax]
    pcmpeqb xmm1, xmm0
    pmovmskb ecx, xmm1
    lea rax, [eax + 16]
    test ecx, ecx
    jz .loop
    bsf ecx, ecx
    lea rax, [rax + rcx - 16]
    mov r14, rax
";
}

function null println function string input {
    let length = stringLength call input call;
    asm "    mov rax, 1
    mov rdi, 1
    mov rsi, [rbp + 16]
    mov rdx, [rbp - 8]
    syscall
    ";
}

function string fromBool function bool input {
    if input if {
        return "true";
    } else {
        return "false";
    }
}

function pointer stringCopy function pointer src pointer dest {
    asm "    mov rdi, [rbp + 16]
    mov rsi, [rbp + 24]
    cmp	di, 0
    je strcpy_done
    cmp	rsi, 0
    je strcpy_done
    mov rcx, -1
strcpy_loop:
    inc	rcx
    mov	al, byte [rsi + rcx]
    mov	byte [rdi + rcx], al
    cmp	al, 0
    jne	strcpy_loop
strcpy_done:
    mov	r14, rdi
";
}

function string concat function string prefix string suffix {
    let prefixLength = stringLength call prefix call;
    let suffixLength = stringLength call suffix call;
    let point = malloc call prefixLength + suffixLength + 1 call;
    stringCopy call prefix, point call;
    stringCopy call suffix, point + prefixLength call;
    return string point;
}

function string fromInt function int number {
    let result = "";
    if number == 0 if {
        return "0";
    } else {
        let isNeg = false;
        if number < 0 if {
            isNeg = true;
            number = -1 * number;
        }
        while number > 0 while {
            let val = int mod call float number, float 10 call + 48; //used in asm
            let stringified = ""; // used in asm
            asm "    mov qword [rbp - 16], [rbp - 8]
    "; //moves the ascii value calculated above into stringified
            result = concat call stringified, result call;
            number = floor call number / 10 call;
        }

        if isNeg if {
            result = concat call "-", result call;
        }

        return result;
    }
}

function string fromFloat function float number {
    let prefix = "";
    if number < 0 if {
        prefix = "-";
    }
    number = abs call number call;
    let integralPart = floor call number call;
    let fractionalPart = number minus integralPart;

    let integralString = "";
    let fractionalString = "";

    if integralPart == 0 if{
        integralString = "0";
    } else {
        while integralPart > 0 while {
            integralString = "";
        }
    }
}
